#----------------------------------------------------------------------
# Working with functions in Python
#----------------------------------------------------------------------

1.) Run the Jupyter notebook 'working_with_functions_Python.ipynb' step by 
    step. Try to find own examples of built-in functions, user-defined functions 
    and variable-length argument lists.

2.) Run the Jupyter notebook 'population_and_samples.ipynb' step by step. In the 
    bootstrap function change the parameters to create your own population, bootstrap 
    samples and graphical representation of the bootstrapping procedure.

4.) Write a function that reads both .json and .csv files to a pandas data frame 
    without the need to specify the .read_csv() or .read_json() method 'by hand'. 
    Hint: The function must first check the file extensions of files in your
    specified directory. If it is a .json file then .read_json() must be used 
    otherwise .read_csv() must be used. Use the library 'fnmatch' to check for 
    file extension patterns. For solution see below:

import os
import pandas as pd

# Function
def read_multiple(path='.', csv_sep=";"):
    """
    Reads .csv- and .json files and returns pandas data frames
    
    :param path: path to working directory. Type = str
    :param csv_sep: separator of .csv-files. Type = str
    :return: pandas data frames one for each .csv- and .json file
    """

    # Lists to store file names
    csv_files = []
    json_files = []

    # Check file extensions of files in your local directory
    for file in os.listdir(path):

        # .csv - files
        try:
            if file.split(".")[-1] == 'csv':
                csv_files.append(file)
                # Read and print .csv-files in list
                for csv_file in csv_files:
                    df_csv = pd.read_csv(file)
                    print('.csv-file:\n', df_csv)
        except:
            pass

        # .json - files
        try:
            if file.split(".")[-1] == 'json':
                json_files.append(file)
                # Read and print .json-files in list
                for json_file in json_files:
                    df_json = pd.read_json(file)
                    print('\n.json-file:\n', df_json)
        except:
            pass
     
    
# Function call
read_multiple()

